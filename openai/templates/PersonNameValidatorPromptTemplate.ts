import { z } from 'zod';
import ApiRestPromptModule from './modules/api-rest/ApiRestPromptModule';
import { IApiRestPromptModule } from './modules/api-rest/IApiRestPromptModule';

export type PersonGender = 'male' | 'female' | 'unknown';

export type PersonNameValidatorOutput = {
  isValid: boolean;
  name: string;
  gender: PersonGender;
};

export default class PersonNameValidatorPromptTemplate implements IApiRestPromptModule {
  private apiRestPromptTemplate: ApiRestPromptModule;

  constructor() {
    this.apiRestPromptTemplate = new ApiRestPromptModule({
      tasks: [
        'Voc√™ deve validar se o nome fornecido √© um nome de pessoa v√°lido ou n√£o e format√°-lo',
        'Voc√™ deve tentar identificar o g√™nero do nome identificado, as op√ß√µes s√£o "male", "female" e "unknown"',
        'Se voc√™ n√£o tiver 100% de certeza do g√™nero, voc√™ deve considerar o g√™nero como "unknown"',
        'Nomes unisex devem ser considerados como "unknown"',
        'Voc√™ deve desconsiderar caracteres que n√£o fa√ßam sentido, foque no nome.',
        'Desde que haja um nome v√°lido de pessoa no texto, voc√™ deve considera-lo v√°lido.',
        'Apelidos n√£o s√£o nomes v√°lidos de pessoa, se voc√™ conseguir extrair o nome de pessoa de um apelido, considere-o v√°lido.',
      ],
      inputModel: z.object({
        name: z.string().describe('O nome de pessoa a ser validado'),
      }),
      outputModel: z.object({
        isValid: z.boolean().describe('Se √© um nome de pessoa v√°lido ou n√£o'),
        name: z.string().describe('O nome de pessoa formatado'),
        gender: z
          .string()
          .describe('O g√™nero identificado pelo nome da pessoa, pode ser "male", "female" ou "unknown"'),
      }),
    });
  }

  static withBaseExamples(): PersonNameValidatorPromptTemplate {
    const template = new PersonNameValidatorPromptTemplate();

    template.addValidExample('Joaoo da Silva', 'Jo√£o', 'male');
    template.addValidExample('muriel', 'Muriel', 'unknown');
    template.addValidExample('pedr√£o zezinho', 'Pedro', 'male');
    template.addValidExample('Cris', 'Cris', 'unknown');
    template.addValidExample('ana MAria Braga', 'Ana', 'female');
    template.addValidExample('feLIPEe üíÄ', 'Felipe', 'male');
    template.addValidExample('Fernanda', 'Fernanda', 'female');
    template.addValidExample('Gabi', 'Gabi', 'unknown');
    template.addValidExample('jose üíñ', 'Jos√©', 'male');
    template.addValidExample('Duda', 'Duda', 'unknown');

    template.addInvalidExample('bochecha');
    template.addInvalidExample('rei do p√£o');
    template.addInvalidExample('mestre do marketing');
    template.addInvalidExample('hamonia dom√©stica');
    template.addInvalidExample('pirula');
    template.addInvalidExample('üï∂Ô∏è');
    template.addInvalidExample('~');
    template.addInvalidExample('.');
    template.addInvalidExample('x');

    return template;
  }

  addValidExample(name: string, outName: string, gender: PersonGender): void {
    this.addExample({
      name,
      output: {
        isValid: true,
        name: outName,
        gender,
      },
    });
  }

  addInvalidExample(name: string): void {
    this.addExample({
      name,
      output: {
        isValid: false,
        name: '',
        gender: 'unknown',
      },
    });
  }

  addExample({ name, output }: { name: string; output: PersonNameValidatorOutput }): void {
    this.apiRestPromptTemplate.addExample({
      input: {
        name,
      },
      output,
    });
  }

  parseResponse(response: string): Promise<PersonNameValidatorOutput> {
    return this.apiRestPromptTemplate.parseResponse(response);
  }

  parseAndValidateResponse(response: string): Promise<PersonNameValidatorOutput> {
    return this.apiRestPromptTemplate.parseAndValidateResponse(response);
  }

  formatPrompt(name: string): Promise<string> {
    return this.apiRestPromptTemplate.formatPrompt({ name });
  }

  formatRequestPrompt(name: string): Promise<string> {
    return this.apiRestPromptTemplate.formatRequestPrompt({ name });
  }
}
